//영어 한 단어만 검색 가능 - 해결 가능
//실행에 필요한 메모리 공간 = 폴더 내 가장 큰 파일의 크기 * 2
//count가 0번인 경우는 출력 안 함
#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <io.h>

typedef struct _Result
{
	char filename[256];
	int count;
	int *str_location;
}result;

int getFileSize(FILE *fp)
{
	int size;
	long currPos = ftell(fp);

	fseek(fp, 0, SEEK_END);
	size = (int)ftell(fp);

	fseek(fp, currPos, SEEK_SET);

	return size;
}

void strcut(char *H)	//file_directory에서 맨 뒤의 파일명을 제거하는 함수
{
	int i = 0;
	while (H[i])
	{
		i++;
	}
	while (H[i] != '\\')
	{
		i--;
	}
	H[i + 1] = '\0';
}

int compare_with_size(const void *a, const void  *b)	//qsort 내림차순 정렬
{
	result *ptr_a = (result*)a;
	result *ptr_b = (result*)b;

	if (ptr_a->count < ptr_b->count) return 1;
	else if (ptr_a->count == ptr_b->count) return 0;
	else return -1;
}

int main()
{
	char *find_str = (char *)malloc(200);
	char *buffer;
	char *e2;
	char *str_ptr;
	char *file_directory = (char *)malloc(200);		//폴더 위치
	int count, check = 0, i = 0, j = 0;		//count = 단어 개수, check = 모든 파일에 찾는 단어가 없을 때
	int file_size;
	char YN = 'Y';

	_finddatai64_t c_file;
	intptr_t hFile;

	result *r = (result *)malloc(sizeof(result)); 
	
	printf("폴더 위치를 입력하세요 : ");
	scanf("%[^\n]s", file_directory);
	
	printf("찾을 단어를 입력하세요 : ");
	scanf(" %[^\n]s", find_str);
	
	printf("대소문자를 구분하나요?(Y/N) : ");
	scanf(" %c", &YN);
	getchar();

	strcat(file_directory, "\\*.txt");

	if ((hFile = _findfirsti64(file_directory, &c_file)) == -1L)
	{
		switch (errno) 
		{
		case ENOENT:
			printf(":: No file in such directory ::\n"); break;
		case EINVAL:
			fprintf(stderr, "Invalid path name.\n"); exit(1); break;
		case ENOMEM:
			fprintf(stderr, "Not enough memory or file name too long.\n"); exit(1); break;
		default:
			fprintf(stderr, "Unknown error.\n"); exit(1); break;
		}
	}
	else 
	{
		strcut(file_directory);
		do 
		{
			count = 0;
			strcat(file_directory, c_file.name);
			
			FILE *fp = fopen(file_directory, "rt");
			if (fp == NULL)
				return 1;

			file_size = getFileSize(fp);
			buffer = (char *)calloc(1, (size_t)file_size + 1);
			e2 = (char *)calloc(1, (size_t)file_size + 1);

			while (!feof(fp))
			{
				e2 = fgets(e2, file_size, fp);	//fgets으로 문자열을 읽는데 오류가 나지 않는다고 가정
				if (e2 == NULL)	break;	//strcat NULL 쓰기 방지
				strcat(buffer, e2);
			}


			if (YN == 'N')		//대소문자를 구분하지 않을 때
			{
				_strlwr(buffer);
				_strlwr(find_str);
			}

			str_ptr = strstr(buffer, find_str);     //문자를 찾음 - 찾는 속도 개선필요
			if (str_ptr == NULL) check += 1;

			while (str_ptr != NULL)                // 검색된 문자열이 없을 때까지 반복
			{
				count += 1;
				str_ptr = strstr(str_ptr + 1, find_str);    //문자를 찾음 - 찾는 속도 개선필요
			}
			
			r = (result *)realloc(r ,(i+1)*sizeof(result));
			strcpy(r[i].filename, c_file.name);
			r[i].count = count;

			fclose(fp);
			free(buffer);
			free(e2);

			strcut(file_directory);
			i++;
		} while (_findnexti64(hFile, &c_file) == 0);

		if (check == i)
		{
			printf(":: No result in such directory.\n");
		}
		else
		{
			qsort(r, i, sizeof(result), compare_with_size);
			printf("File name            |  Count\n");
			for (j = 0; j < i; j++)
			{
				if (r[j].count == 0) continue;
				printf("%-20s |%5d번\n", r[j].filename, r[j].count);
			}
		}
		_findclose(hFile);
		free(r);
		free(find_str);
	}
	return 0;
}
